NPM: node package manager
- It is the package manager for node.js
- Help Js Developers to easily shared/used package modules
- Its a kind of repository which is a public collection of packages of open source code for node.Js

Package.json: 
- configuration for npm
- manage all dependencies/library which is going to used in our application
- It tracks which version is installed in your system

Bundlers: 
- bundles our app which can be pushed in production
- eg. webpack, parcel, etc...
- create-react-app : used webpack in BTS
- we can easily use these by installing them by npm

package/Dependency: is of two types
1. Dev: when we develop our app, then we require dev dependencies
2. normal: used in production also

caret vs tilde in Dependency:
- caret (^): when we use caret (^) it upgrades the minor version if available not major. so it is safe to use
- tilde (`): It's used when we want major upgrade if available


package.json vs package-lock.json
- package.json: 
    - It tracks which version is installed in your system
    - There is caret and tilde to upgrade the version acc.
- package-lock.json: 
    - it locks the version, and keep the record of every exact version which is installed

node modules:
- collection of dependencies
- fetch all the code from npm and stores in node modules
- some dependencies are in the node modules that may need in X Dependency which is in package files.

HMR: Hot Module Replacement 
- change in your code, and server is automatically refresh.

Tree Shaking: 
- in parcel: ??
- process to eliminate the unused data from bundles

JSX:
- is not html in JS
- HTML/xml like syntax in JS
- its a syntax and core react element (React.createElement(....)), both are objects
    - proof: here we give class name in JSX like className, but in html we use only class keyword.
    - we use camel case for attributes in JSX
- You can perform Js operations in html by using {}.
- you can create react element with JSX
- we use JSX in react instead of using core react elements because
    - more readablity
    - less complex to write
    - JSX code looks more neatier
- JS engine doesn't understand JSX, JS engine only understands es6. you can try JSX code in browser console itself, It'll throw error.
- so how JSX works in react ?
    - it transpiled before it reaches to the JS engine
    - transpiled done by a babel module in parcel (the server we use to run react).
- JSX is syntactic sugar for creating React elements.
- Babel transpiles JSX into JavaScript (React.createElement() calls). Its a open source javascript compiler.
- Parcel is a bundler that uses Babel to transpile JSX during the build process

React:
- react elements
- react components
    - everything in react is component: search bar is component, header/footer/cards/input everything is a component in react.
    - reason: react is rendering everything through component. The file structure is include in component.
    - there are 2 types of component:
        - class component: old way of coding: creating by using js class
        - functional component: new way of coding: creating by using js functions
            - definition: JS function which returns some JSX or react element.

Component composition:
- when we use one component to another component.

React hooks
- normal js utitlity functions used by react
- wrote by facebook devs
- there are multiple hooks:
    - useState() : used to create a state variable (because it maintains the state of the component)
        - local state variable : scope within the component.
        - const [var, setVar] = useState(<DEFAULT_VALUE>)
        - the set value (second parameter): used to update/edit the original state.
        - whenever a state variable updates, react will re-renders the components.
    - useEffect()
    - useContext()